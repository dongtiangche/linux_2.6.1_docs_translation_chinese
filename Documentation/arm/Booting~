			Booting ARM Linux
			=================

Author:	Russell King
Date  : 18 May 2002

The following documentation is relevant to 2.4.18-rmk6 and beyond.

In order to boot ARM Linux, you require a boot loader, which is a small
program that runs before the main kernel.  The boot loader is expected
to initialise various devices, and eventually call the Linux kernel,
passing information to the kernel.


为了启动ARM Linux，你需要一个启动引导，那是运行内核的一段小程序。启动引导用来
初始化不同的设备，最终调用Linux内核，将信息传递给内核

Essentially, the boot loader should provide (as a minimum) the
following:

1. Setup and initialise the RAM.
2. Initialise one serial port.
3. Detect the machine type.
4. Setup the kernel tagged list.
5. Call the kernel image.

本质上，启动引导最少要提供以下的：

1.设置和初始化RAM
2.初始化一个串行端口
3.检测机器类型
4.设置内核标记列表
5.调用内核镜像


1. Setup and initialise RAM
---------------------------

Existing boot loaders:		MANDATORY
New boot loaders:		MANDATORY

The boot loader is expected to find and initialise all RAM that the
kernel will use for volatile data storage in the system.  It performs
this in a machine dependent manner.  (It may use internal algorithms
to automatically locate and size all RAM, or it may use knowledge of
the RAM in the machine, or any other method the boot loader designer
sees fit.)


1.设置和初始化RAM
-----------------

存在的引导装载程序：			MANDATORY
新的引导装载程序：			MANDATORY

引导装载程序被期望找到和初始化所有被用于系统中存储可变数据的RAM。它表现
出来的是依赖机器的行为（它可能会使用内部的算法来自动分配所有的RAM，或者
是使用机器中的一些信息，或者是引导程序设计者认为合适的其他方法）


2. Initialise one serial port
-----------------------------

Existing boot loaders:		OPTIONAL, RECOMMENDED
New boot loaders:		OPTIONAL, RECOMMENDED

The boot loader should initialise and enable one serial port on the
target.  This allows the kernel serial driver to automatically detect
which serial port it should use for the kernel console (generally
used for debugging purposes, or communication with the target.)

As an alternative, the boot loader can pass the relevant 'console='
option to the kernel via the tagged lists specifying the port, and
serial format options as described in

       linux/Documentation/kernel-parameters.txt.


2.初始化一个串行端口
-------------------

存在的引导装载程序：		OPTIONAL, RECOMMENDED
新的引导装载程序：		OPTIONAL, RECOMMENDED

引导装载程序应当初始化并启用一个串行端口。它使得内核的系列驱动来自动地检测
哪个串口应当被系统控制台所用（一般用于调试和与目标的通信）

作为替代，引导装载程序能够通过标记列表给内核传递相关'console='选项来指定端口，
相关的格式化选项在下面文档中被描述：

       linux/Documentation/kernel-parameters.txt.


3. Detect the machine type
--------------------------

Existing boot loaders:		OPTIONAL
New boot loaders:		MANDATORY

The boot loader should detect the machine type its running on by some
method.  Whether this is a hard coded value or some algorithm that
looks at the connected hardware is beyond the scope of this document.
The boot loader must ultimately be able to provide a MACH_TYPE_xxx
value to the kernel. (see linux/arch/arm/tools/mach-types).


3.检测机器类型

存在的引导装载程序：		OPTIONAL
新的引导装载程序：		MANDATORY

引导装载程序应该检测他所运行的机器类型。不论这是否是一个硬编码或者一些
算法来监视连接的硬件超出了本片文档的范畴。引导装载程序最终会向内核提供
一个MACH_TYPE_XXX的值（查看linux/arch/arm/tools/mach-types）


4. Setup the kernel tagged list
-------------------------------

Existing boot loaders:		OPTIONAL, HIGHLY RECOMMENDED
New boot loaders:		MANDATORY

The boot loader must create and initialise the kernel tagged list.
A valid tagged list starts with ATAG_CORE and ends with ATAG_NONE.
The ATAG_CORE tag may or may not be empty.  An empty ATAG_CORE tag
has the size field set to '2' (0x00000002).  The ATAG_NONE must set
the size field to zero.

Any number of tags can be placed in the list.  It is undefined
whether a repeated tag appends to the information carried by the
previous tag, or whether it replaces the information in its
entirety; some tags behave as the former, others the latter.

The boot loader must pass at a minimum the size and location of
the system memory, and root filesystem location.  Therefore, the
minimum tagged list should look:

	+-----------+
base ->	| ATAG_CORE |  |
	+-----------+  |
	| ATAG_MEM  |  | increasing address
	+-----------+  |
	| ATAG_NONE |  |
	+-----------+  v

The tagged list should be stored in system RAM.

The tagged list must be placed in a region of memory where neither
the kernel decompressor nor initrd 'bootp' program will overwrite
it.  The recommended placement is in the first 16KiB of RAM.


4.设置内核标记列表
------------------

存在的引导装载程序：		OPTIONAL, HIGHLY RECOMMENDED
新的引导装载程序：		MANDATORY

启动引导程序必须创建并初始化内核标记列表。一个可用的标记列表以ATAG_CORE
开始并以ATAG_NONE结束。ATAG_CORE标记可能为空也可能不为空。一个空的
ATAG_CORE标记会将大小空间设置为'2'(0x00000002)，ATAG_NONE必须设置为0

任何数字标记都可以放置于这个列表中。它没有定义一个重复标记是要增加它之前
的标记所携带的信息，或者还是替换它全部的信息；一些标记像从前一样，其他的
被更新

引导装载程序必须传递一个最小的大小，系统的内存分配，和根文件系统位置。因此，
最小的标记列表应该如下所示：

	+-----------+
基地址->| ATAG_CORE |  |
	+-----------+  |
	| ATAG_MEM  |  | 地址增加
	+-----------+  |
	| ATAG_NONE |  |
	+-----------+  v

标记列表应当被储存在内核中

标记列表用当被放置在内存不会被内核解压或者'bootp'程序覆盖的区域。建议的位置
是RAM的前16K的位置


5. Calling the kernel image
---------------------------

Existing boot loaders:		MANDATORY
New boot loaders:		MANDATORY

There are two options for calling the kernel zImage.  If the zImage
is stored in flash, and is linked correctly to be run from flash,
then it is legal for the boot loader to call the zImage in flash
directly.

The zImage may also be placed in system RAM (at any location) and
called there.  Note that the kernel uses 16K of RAM below the image
to store page tables.  The recommended placement is 32KiB into RAM.

In either case, the following conditions must be met:

- CPU register settings
  r0 = 0,
  r1 = machine type number discovered in (3) above.
  r2 = physical address of tagged list in system RAM.

- CPU mode
  All forms of interrupts must be disabled (IRQs and FIQs)
  The CPU must be in SVC mode.  (A special exception exists for Angel)

- Caches, MMUs
  The MMU must be off.
  Instruction cache may be on or off.
  Data cache must be off.

- The boot loader is expected to call the kernel image by jumping
  directly to the first instruction of the kernel image.

5.调用内核镜像
--------------

存在的引导装载程序：		MANDATORY
新的引导装载程序：		MANDATORY

调用内核zImage有两种观点。如果zImage储存在闪存中，并且被正确的从闪存
链接运行，那么引导装载程序直接从闪存中调用zImage是合法的

zImage镜像也有可能被存放于RAM（在任何位置）并且被调用。请注意内核使用位于
镜像之下16K的RAM空间来储存页表。建议的位置是RAM之中的32K

在任何情况下，以下的情况一定会遇到：

- 设置CPU寄存器
  r0 = 0，
  r1 = 机器类型号（上述的第三条）
  r2 = 系统RAM中的标记列表物理地址

- CPU模式
  任何形式的中端都不可用
  CPU必须处于SVC模式

- 缓存，储存器管理单元
  储存器管理单元必须被关闭
  指令缓存可以开或关
  数据缓存必须被关闭

- 引导装载程序期望直接跳转到内核的第一条指令来调用内核

